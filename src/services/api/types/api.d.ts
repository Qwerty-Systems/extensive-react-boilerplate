/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/audit-logs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AuditLogsController_findAll_v1"];
    put?: never;
    post: operations["AuditLogsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/audit-logs/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AuditLogsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["AuditLogsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["AuditLogsController_update_v1"];
    trace?: never;
  };
  "/api/v1/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["UsersController_findAll_v1"];
    put?: never;
    post: operations["UsersController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["UsersController_findOne_v1"];
    put?: never;
    post?: never;
    delete: operations["UsersController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["UsersController_update_v1"];
    trace?: never;
  };
  "/api/v1/onboardings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["OnboardingsController_findAll_v1"];
    put?: never;
    post: operations["OnboardingsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/onboardings/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["OnboardingsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["OnboardingsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["OnboardingsController_update_v1"];
    trace?: never;
  };
  "/api/v1/onboardings/user/{userId}/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["OnboardingsController_getUserStatus_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/onboardings/initialize-user/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["OnboardingsController_initializeUser_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/onboardings/user/{userId}/complete/{stepKey}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["OnboardingsController_completeUserStep_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/onboardings/tenant/{tenantId}/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["OnboardingsController_getTenantStatus_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/onboardings/initialize-tenant/{tenantId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["OnboardingsController_initializeTenant_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/onboardings/tenant/{tenantId}/skip/{stepKey}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["OnboardingsController_skipTenantStep_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/tenants": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["TenantsController_findAll_v1"];
    put?: never;
    post: operations["TenantsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/tenants/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["TenantsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["TenantsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["TenantsController_update_v1"];
    trace?: never;
  };
  "/api/v1/regions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["RegionsController_findAll_v1"];
    put?: never;
    post: operations["RegionsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/regions/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["RegionsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["RegionsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["RegionsController_update_v1"];
    trace?: never;
  };
  "/api/v1/settings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["SettingsController_findAll_v1"];
    put?: never;
    post: operations["SettingsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/settings/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["SettingsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["SettingsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["SettingsController_update_v1"];
    trace?: never;
  };
  "/api/v1/kyc-details": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["KycDetailsController_findAll_v1"];
    put?: never;
    post: operations["KycDetailsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/kyc-details/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["KycDetailsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["KycDetailsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["KycDetailsController_update_v1"];
    trace?: never;
  };
  "/api/v1/files/upload": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["FilesLocalController_uploadFile_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/tenant-types": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["TenantTypesController_findAll_v1"];
    put?: never;
    post: operations["TenantTypesController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/tenant-types/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["TenantTypesController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["TenantTypesController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["TenantTypesController_update_v1"];
    trace?: never;
  };
  "/api/v1/payment-notifications": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["PaymentNotificationsController_findAll_v1"];
    put?: never;
    post: operations["PaymentNotificationsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/payment-notifications/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["PaymentNotificationsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["PaymentNotificationsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["PaymentNotificationsController_update_v1"];
    trace?: never;
  };
  "/api/v1/payment-aggregators": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["PaymentAggregatorsController_findAll_v1"];
    put?: never;
    post: operations["PaymentAggregatorsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/payment-aggregators/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["PaymentAggregatorsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["PaymentAggregatorsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["PaymentAggregatorsController_update_v1"];
    trace?: never;
  };
  "/api/v1/credit-balances": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["CreditBalancesController_findAll_v1"];
    put?: never;
    post: operations["CreditBalancesController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/credit-balances/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["CreditBalancesController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["CreditBalancesController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["CreditBalancesController_update_v1"];
    trace?: never;
  };
  "/api/v1/payment-methods": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["PaymentMethodsController_findAll_v1"];
    put?: never;
    post: operations["PaymentMethodsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/payment-methods/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["PaymentMethodsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["PaymentMethodsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["PaymentMethodsController_update_v1"];
    trace?: never;
  };
  "/api/v1/reminders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["RemindersController_findAll_v1"];
    put?: never;
    post: operations["RemindersController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/reminders/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["RemindersController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["RemindersController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["RemindersController_update_v1"];
    trace?: never;
  };
  "/api/v1/invoices": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["InvoicesController_findAll_v1"];
    put?: never;
    post: operations["InvoicesController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/invoices/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["InvoicesController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["InvoicesController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["InvoicesController_update_v1"];
    trace?: never;
  };
  "/api/v1/exemptions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["ExemptionsController_findAll_v1"];
    put?: never;
    post: operations["ExemptionsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/exemptions/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["ExemptionsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["ExemptionsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["ExemptionsController_update_v1"];
    trace?: never;
  };
  "/api/v1/discounts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["DiscountsController_findAll_v1"];
    put?: never;
    post: operations["DiscountsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/discounts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["DiscountsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["DiscountsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["DiscountsController_update_v1"];
    trace?: never;
  };
  "/api/v1/payment-plans": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["PaymentPlansController_findAll_v1"];
    put?: never;
    post: operations["PaymentPlansController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/payment-plans/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["PaymentPlansController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["PaymentPlansController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["PaymentPlansController_update_v1"];
    trace?: never;
  };
  "/api/v1/accounts-receivables": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AccountsReceivablesController_findAll_v1"];
    put?: never;
    post: operations["AccountsReceivablesController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/accounts-receivables/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AccountsReceivablesController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["AccountsReceivablesController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["AccountsReceivablesController_update_v1"];
    trace?: never;
  };
  "/api/v1/accounts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AccountsController_findAll_v1"];
    put?: never;
    post: operations["AccountsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/accounts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AccountsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["AccountsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["AccountsController_update_v1"];
    trace?: never;
  };
  "/api/v1/residences": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["ResidencesController_findAll_v1"];
    put?: never;
    post: operations["ResidencesController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/residences/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["ResidencesController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["ResidencesController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["ResidencesController_update_v1"];
    trace?: never;
  };
  "/api/v1/inventories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["InventoriesController_findAll_v1"];
    put?: never;
    post: operations["InventoriesController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/inventories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["InventoriesController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["InventoriesController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["InventoriesController_update_v1"];
    trace?: never;
  };
  "/api/v1/payments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["PaymentsController_findAll_v1"];
    put?: never;
    post: operations["PaymentsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/payments/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["PaymentsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["PaymentsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["PaymentsController_update_v1"];
    trace?: never;
  };
  "/api/v1/transactions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["TransactionsController_findAll_v1"];
    put?: never;
    post: operations["TransactionsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/transactions/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["TransactionsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["TransactionsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["TransactionsController_update_v1"];
    trace?: never;
  };
  "/api/v1/vendor-bills": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["VendorBillsController_findAll_v1"];
    put?: never;
    post: operations["VendorBillsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/vendor-bills/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["VendorBillsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["VendorBillsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["VendorBillsController_update_v1"];
    trace?: never;
  };
  "/api/v1/accounts-payables": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AccountsPayablesController_findAll_v1"];
    put?: never;
    post: operations["AccountsPayablesController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/accounts-payables/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AccountsPayablesController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["AccountsPayablesController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["AccountsPayablesController_update_v1"];
    trace?: never;
  };
  "/api/v1/vendors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["VendorsController_findAll_v1"];
    put?: never;
    post: operations["VendorsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/vendors/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["VendorsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["VendorsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["VendorsController_update_v1"];
    trace?: never;
  };
  "/api/v1/customer-plans": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["CustomerPlansController_findAll_v1"];
    put?: never;
    post: operations["CustomerPlansController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/customer-plans/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["CustomerPlansController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["CustomerPlansController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["CustomerPlansController_update_v1"];
    trace?: never;
  };
  "/api/v1/tenant-configs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["TenantConfigsController_findAll_v1"];
    put?: never;
    post: operations["TenantConfigsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/tenant-configs/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["TenantConfigsController_findById_v1"];
    put?: never;
    post?: never;
    delete: operations["TenantConfigsController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["TenantConfigsController_update_v1"];
    trace?: never;
  };
  "/api/v1/auth/email/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_login_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/email/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_register_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/email/confirm": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_confirmEmail_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/email/confirm/new": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_confirmNewEmail_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/forgot/password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_forgotPassword_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/reset/password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_resetPassword_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AuthController_me_v1"];
    put?: never;
    post?: never;
    delete: operations["AuthController_delete_v1"];
    options?: never;
    head?: never;
    patch: operations["AuthController_update_v1"];
    trace?: never;
  };
  "/api/v1/auth/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_refresh_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_logout_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/facebook/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthFacebookController_login_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/google/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthGoogleController_login_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/apple/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthAppleController_login_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["HomeController_appInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    CreateAuditLogDto: {
      /**
       * @description ID of user who performed the action
       * @example a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8
       */
      performedByUserId?: string;
      /**
       * @description ID of tenant who performed the action
       * @example t1e2n3a4n5t6-7890-id
       */
      performedByTenantId?: string;
      status?: string;
      description?: string;
      /**
       * @description State before the action
       * @example {
       *       "email": "old@example.com"
       *     }
       */
      beforeState?: Record<string, never>;
      /**
       * @description State after the action
       * @example {
       *       "email": "new@example.com"
       *     }
       */
      afterState?: Record<string, never>;
      entityId?: string;
      entityType: string;
      /**
       * @description Action performed
       * @example update
       * @enum {string}
       */
      action:
        | "create"
        | "read"
        | "update"
        | "delete"
        | "complete_step"
        | "skip_step"
        | "restart_step"
        | "login"
        | "logout"
        | "password_change"
        | "password_reset_request"
        | "password_reset_complete"
        | "assign_role"
        | "remove_role"
        | "update_permissions"
        | "invite_user"
        | "activate_user"
        | "deactivate_user"
        | "create_tenant"
        | "update_tenant"
        | "delete_tenant"
        | "switch_tenant"
        | "upload"
        | "download"
        | "export"
        | "import"
        | "update_settings"
        | "reset_settings"
        | "view_audit_log"
        | "export_audit_log"
        | "system_start"
        | "system_shutdown"
        | "system_error"
        | "send_notification"
        | "read_notification"
        | "archive"
        | "restore"
        | "tag"
        | "untag";
    };
    DatabaseConfigDto: {
      host: string;
      port: number;
      username: string;
      password: string;
      database: string;
    };
    Region: {
      /**
       * @description ZIP codes covered by this region
       * @example [
       *       "00100",
       *       "00101"
       *     ]
       */
      zipCodes: string[];
      /**
       * @description Operating hours for waste collection
       * @example {
       *       "days": [
       *         "mon",
       *         "wed",
       *         "fri"
       *       ],
       *       "startTime": "08:00",
       *       "endTime": "17:00"
       *     }
       */
      operatingHours: Record<string, never>;
      /**
       * @description Supported service types in this region
       * @example [
       *       "residential",
       *       "commercial"
       *     ]
       */
      serviceTypes: string[];
      centroidLon: number | null;
      centroidLat: number | null;
      /**
       * @description GeoJSON polygon defining region boundaries
       * @example {
       *       "type": "Polygon",
       *       "coordinates": [
       *         [
       *           [
       *             36.8219,
       *             -1.2921
       *           ],
       *           [
       *             36.895,
       *             -1.2921
       *           ],
       *           [
       *             36.895,
       *             -1.2335
       *           ],
       *           [
       *             36.8219,
       *             -1.2335
       *           ],
       *           [
       *             36.8219,
       *             -1.2921
       *           ]
       *         ]
       *       ]
       *     }
       */
      boundary: Record<string, never>;
      name: string | null;
      tenant: components["schemas"]["Tenant"];
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Settings: {
      /**
       * @description Configuration settings
       * @example {
       *       "currency": "KES",
       *       "notificationPreferences": {
       *         "email": true,
       *         "sms": false
       *       }
       *     }
       */
      config: Record<string, never>;
      /**
       * @description Type of settings category
       * @enum {string}
       */
      settingsType:
        | "invoice"
        | "billing"
        | "payment"
        | "tax"
        | "commission"
        | "notification"
        | "reminder"
        | "alert"
        | "waste"
        | "collection"
        | "processing"
        | "recycling"
        | "disposal"
        | "marketplace"
        | "listing"
        | "bidding"
        | "transaction"
        | "preferences"
        | "privacy"
        | "accessibility"
        | "compliance"
        | "certification"
        | "reporting"
        | "audit"
        | "api"
        | "integration"
        | "security"
        | "rate_limiting"
        | "localization"
        | "language"
        | "currency"
        | "timezone"
        | "theme"
        | "layout"
        | "dashboard"
        | "system"
        | "maintenance"
        | "backup"
        | "scaling"
        | "carbon_accounting"
        | "sustainability"
        | "routing"
        | "vehicle"
        | "driver";
      /**
       * @description Subject type this settings applies to
       * @enum {string}
       */
      subjectType: "tenant" | "user" | "system" | "collector" | "facility";
      tenant: components["schemas"]["Tenant"];
      user: components["schemas"]["User"];
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    FileType: {
      /** @example cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae */
      id: string;
      /** @example https://example.com/path/to/file.jpg */
      path: string;
    };
    /** @enum {string} */
    TenantTypeCode:
      | "platform_owner"
      | "community_group"
      | "recycling_company"
      | "collection_agency"
      | "municipality"
      | "enterprise"
      | "educational_institution"
      | "healthcare_provider"
      | "non_profit_organization"
      | "government_agency"
      | "technology_company"
      | "retail_business"
      | "manufacturing_company"
      | "transportation_service"
      | "financial_institution"
      | "agricultural_business"
      | "energy_provider"
      | "construction_company"
      | "hospitality_business"
      | "generic";
    TenantType: {
      description: string | null;
      code: components["schemas"]["TenantTypeCode"];
      name: string | null;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    KycDetails: {
      verifiedBy: number | null;
      /** Format: date-time */
      verifiedAt: string | null;
      /** Format: date-time */
      submittedAt: string | null;
      /**
       * @default pending
       * @enum {string}
       */
      status: "pending" | "verified" | "rejected";
      /** @example {
       *       "frontUrl": "https://example.com/front.jpg",
       *       "backUrl": "https://example.com/back.jpg",
       *       "expiryDate": "2023-12-31"
       *     } */
      documentData: Record<string, never> | null;
      documentNumber: string | null;
      documentType: string | null;
      /** @enum {string} */
      subjectType: "user" | "tenant";
      tenant: components["schemas"]["Tenant"];
      user: components["schemas"]["User"];
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Tenant: {
      onboardingSteps: components["schemas"]["Onboarding"][] | null;
      fullyOnboarded: boolean;
      databaseConfig: components["schemas"]["DatabaseConfigDto"];
      domain: string | null;
      regions: components["schemas"]["Region"][] | null;
      settings: components["schemas"]["Settings"][] | null;
      schemaName: string | null;
      logo: components["schemas"]["FileType"] | null;
      address: string | null;
      primaryPhone: string | null;
      primaryEmail: string | null;
      name: string | null;
      type: components["schemas"]["TenantType"] | null;
      kycSubmissions: components["schemas"]["KycDetails"][] | null;
      users: components["schemas"]["User"][] | null;
      isActive: boolean;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Onboarding: {
      performedByTenant: components["schemas"]["Tenant"] | null;
      performedByUser: components["schemas"]["User"] | null;
      /** Format: date-time */
      completedAt: string | null;
      /**
       * @description Additional metadata related to the step
       * @example {
       *       "verificationMethod": "email",
       *       "attempts": 3
       *     }
       */
      metadata: Record<string, never> | null;
      isSkippable: boolean;
      isRequired: boolean;
      order: number;
      /**
       * @description Current status of the onboarding step
       * @example pending
       * @enum {string}
       */
      status: "pending" | "completed" | "skipped" | "failed" | "not_applicable";
      description: string;
      name: string;
      stepKey: string;
      /**
       * @description Type of entity being onboarded (user or tenant)
       * @example user
       * @enum {string}
       */
      entityType: "user" | "tenant";
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Role: {
      tenant: components["schemas"]["Tenant"] | null;
      id: number;
      /** @example admin */
      name: string;
    };
    Status: {
      id: number;
      /** @example active */
      name: string;
    };
    User: {
      onboardingSteps: components["schemas"]["Onboarding"][] | null;
      fullyOnboarded: boolean;
      phoneNumber: string | null;
      countryCode: string | null;
      regions: components["schemas"]["Region"][] | null;
      settings: components["schemas"]["Settings"][] | null;
      kycSubmissions: components["schemas"]["KycDetails"][] | null;
      tenant: components["schemas"]["Tenant"];
      id: number;
      /** @example john.doe@example.com */
      email: string;
      /** @example email */
      provider: string;
      /** @example 1234567890 */
      socialId: string;
      /** @example John */
      firstName: string;
      /** @example Doe */
      lastName: string;
      photo: components["schemas"]["FileType"];
      role: components["schemas"]["Role"];
      status: components["schemas"]["Status"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      deletedAt: string;
    };
    AuditLog: {
      performedByUser: components["schemas"]["User"] | null;
      performedByTenant: components["schemas"]["Tenant"] | null;
      status: string | null;
      description: string | null;
      /**
       * @description State before the action
       * @example {
       *       "email": "old@example.com",
       *       "status": "pending"
       *     }
       */
      beforeState: Record<string, never> | null;
      /**
       * @description State after the action
       * @example {
       *       "email": "new@example.com",
       *       "status": "active"
       *     }
       */
      afterState: Record<string, never> | null;
      entityId: string | null;
      entityType: string;
      /**
       * @description Action performed
       * @example create
       * @enum {string}
       */
      action:
        | "create"
        | "read"
        | "update"
        | "delete"
        | "complete_step"
        | "skip_step"
        | "restart_step"
        | "login"
        | "logout"
        | "password_change"
        | "password_reset_request"
        | "password_reset_complete"
        | "assign_role"
        | "remove_role"
        | "update_permissions"
        | "invite_user"
        | "activate_user"
        | "deactivate_user"
        | "create_tenant"
        | "update_tenant"
        | "delete_tenant"
        | "switch_tenant"
        | "upload"
        | "download"
        | "export"
        | "import"
        | "update_settings"
        | "reset_settings"
        | "view_audit_log"
        | "export_audit_log"
        | "system_start"
        | "system_shutdown"
        | "system_error"
        | "send_notification"
        | "read_notification"
        | "archive"
        | "restore"
        | "tag"
        | "untag";
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    InfinityPaginationAuditLogResponseDto: {
      data: components["schemas"]["AuditLog"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateAuditLogDto: {
      /**
       * @description ID of user who performed the action
       * @example a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8
       */
      performedByUserId?: string;
      /**
       * @description ID of tenant who performed the action
       * @example t1e2n3a4n5t6-7890-id
       */
      performedByTenantId?: string;
      status?: string;
      description?: string;
      /**
       * @description State before the action
       * @example {
       *       "email": "old@example.com"
       *     }
       */
      beforeState?: Record<string, never>;
      /**
       * @description State after the action
       * @example {
       *       "email": "new@example.com"
       *     }
       */
      afterState?: Record<string, never>;
      entityId?: string;
      entityType?: string;
      /**
       * @description Action performed
       * @example update
       * @enum {string}
       */
      action?:
        | "create"
        | "read"
        | "update"
        | "delete"
        | "complete_step"
        | "skip_step"
        | "restart_step"
        | "login"
        | "logout"
        | "password_change"
        | "password_reset_request"
        | "password_reset_complete"
        | "assign_role"
        | "remove_role"
        | "update_permissions"
        | "invite_user"
        | "activate_user"
        | "deactivate_user"
        | "create_tenant"
        | "update_tenant"
        | "delete_tenant"
        | "switch_tenant"
        | "upload"
        | "download"
        | "export"
        | "import"
        | "update_settings"
        | "reset_settings"
        | "view_audit_log"
        | "export_audit_log"
        | "system_start"
        | "system_shutdown"
        | "system_error"
        | "send_notification"
        | "read_notification"
        | "archive"
        | "restore"
        | "tag"
        | "untag";
    };
    OnboardingDto: {
      id: string;
    };
    RegionDto: {
      id: string;
    };
    SettingsDto: {
      id: string;
    };
    KycDetailsDto: {
      id: string;
    };
    TenantDto: {
      id: string;
    };
    FileDto: {
      id: string;
    };
    RoleDto: {
      id: Record<string, never>;
    };
    StatusDto: {
      id: Record<string, never>;
    };
    CreateUserDto: {
      fullyOnboarded: boolean;
      onboardingSteps?: components["schemas"]["OnboardingDto"][];
      phoneNumber?: string;
      countryCode?: string;
      regions?: components["schemas"]["RegionDto"][];
      settings?: components["schemas"]["SettingsDto"][];
      kycSubmissions?: components["schemas"]["KycDetailsDto"][];
      tenant: components["schemas"]["TenantDto"];
      /** @example test1@example.com */
      email: string;
      password: string;
      /** @example John */
      firstName: string;
      /** @example Doe */
      lastName: string;
      photo?: components["schemas"]["FileDto"];
      role?: components["schemas"]["RoleDto"];
      status?: components["schemas"]["StatusDto"];
    };
    InfinityPaginationUserResponseDto: {
      data: components["schemas"]["User"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateUserDto: {
      fullyOnboarded?: boolean;
      onboardingSteps?: components["schemas"]["OnboardingDto"][];
      phoneNumber?: string;
      countryCode?: string;
      regions?: components["schemas"]["RegionDto"][];
      settings?: components["schemas"]["SettingsDto"][];
      kycSubmissions?: components["schemas"]["KycDetailsDto"][];
      tenant?: components["schemas"]["TenantDto"];
      /** @example test1@example.com */
      email?: string;
      password?: string;
      /** @example John */
      firstName?: string;
      /** @example Doe */
      lastName?: string;
      photo?: components["schemas"]["FileDto"];
      role?: components["schemas"]["RoleDto"];
      status?: components["schemas"]["StatusDto"];
    };
    UserDto: {
      /** @example userId */
      id: string;
    };
    CreateOnboardingDto: {
      performedByTenant?: components["schemas"]["TenantDto"];
      performedByUser?: components["schemas"]["UserDto"];
      /** Format: date-time */
      completedAt?: string;
      /**
       * @description Additional metadata related to the step
       * @example {
       *       "verificationMethod": "email",
       *       "attempts": 3
       *     }
       */
      metadata: Record<string, never> | null;
      isSkippable: boolean;
      isRequired: boolean;
      order: number;
      /**
       * @description Current status of the onboarding step
       * @example pending
       * @enum {string}
       */
      status: "pending" | "completed" | "skipped" | "failed" | "not_applicable";
      description: string;
      name: string;
      stepKey: string;
      /**
       * @description Type of entity being onboarded (user or tenant)
       * @example user
       * @enum {string}
       */
      entityType: "user" | "tenant";
    };
    InfinityPaginationOnboardingResponseDto: {
      data: components["schemas"]["Onboarding"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateOnboardingDto: {
      performedByTenant?: components["schemas"]["TenantDto"];
      performedByUser?: components["schemas"]["UserDto"];
      /** Format: date-time */
      completedAt?: string;
      /**
       * @description Additional metadata related to the step
       * @example {
       *       "verificationMethod": "email",
       *       "attempts": 3
       *     }
       */
      metadata?: Record<string, never> | null;
      isSkippable?: boolean;
      isRequired?: boolean;
      order?: number;
      /**
       * @description Current status of the onboarding step
       * @example pending
       * @enum {string}
       */
      status?:
        | "pending"
        | "completed"
        | "skipped"
        | "failed"
        | "not_applicable";
      description?: string;
      name?: string;
      stepKey?: string;
      /**
       * @description Type of entity being onboarded (user or tenant)
       * @example user
       * @enum {string}
       */
      entityType?: "user" | "tenant";
    };
    TenantTypeDto: {
      id: string;
    };
    CreateTenantDto: {
      onboardingSteps?: components["schemas"]["OnboardingDto"][];
      fullyOnboarded: boolean;
      databaseConfig: components["schemas"]["DatabaseConfigDto"];
      domain?: string;
      regions?: components["schemas"]["RegionDto"][];
      settings?: components["schemas"]["SettingsDto"][];
      schemaName?: string;
      logo?: components["schemas"]["FileDto"];
      address?: string;
      primaryPhone?: string;
      primaryEmail?: string;
      name?: string;
      type?: components["schemas"]["TenantTypeDto"];
      kycSubmissions?: components["schemas"]["KycDetailsDto"][];
      users?: components["schemas"]["UserDto"][];
      isActive?: boolean;
    };
    InfinityPaginationTenantResponseDto: {
      data: components["schemas"]["Tenant"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateTenantDto: {
      onboardingSteps?: components["schemas"]["OnboardingDto"][];
      fullyOnboarded?: boolean;
      databaseConfig?: components["schemas"]["DatabaseConfigDto"];
      domain?: string;
      regions?: components["schemas"]["RegionDto"][];
      settings?: components["schemas"]["SettingsDto"][];
      schemaName?: string;
      logo?: components["schemas"]["FileDto"];
      address?: string;
      primaryPhone?: string;
      primaryEmail?: string;
      name?: string;
      type?: components["schemas"]["TenantTypeDto"];
      kycSubmissions?: components["schemas"]["KycDetailsDto"][];
      users?: components["schemas"]["UserDto"][];
      isActive?: boolean;
    };
    CreateRegionDto: {
      /**
       * @description ZIP codes covered by this region
       * @example [
       *       "00100",
       *       "00101"
       *     ]
       */
      zipCodes?: string[];
      /**
       * @description Operating hours configuration
       * @example {
       *       "days": [
       *         "mon",
       *         "wed",
       *         "fri"
       *       ],
       *       "startTime": "08:00",
       *       "endTime": "17:00"
       *     }
       */
      operatingHours?: Record<string, never>;
      /**
       * @description Service types available in this region
       * @example [
       *       "residential",
       *       "commercial"
       *     ]
       */
      serviceTypes?: string[];
      /**
       * @description Longitude of region centroid
       * @example 36.8219
       */
      centroidLon?: number;
      /**
       * @description Latitude of region centroid
       * @example -1.2921
       */
      centroidLat?: number;
      /**
       * @description GeoJSON polygon boundary
       * @example {
       *       "type": "Polygon",
       *       "coordinates": [
       *         [
       *           [
       *             36.8219,
       *             -1.2921
       *           ],
       *           [
       *             36.895,
       *             -1.2921
       *           ],
       *           [
       *             36.895,
       *             -1.2335
       *           ],
       *           [
       *             36.8219,
       *             -1.2335
       *           ],
       *           [
       *             36.8219,
       *             -1.2921
       *           ]
       *         ]
       *       ]
       *     }
       */
      boundary: Record<string, never>;
      name?: string;
      tenant: components["schemas"]["TenantDto"];
    };
    InfinityPaginationRegionResponseDto: {
      data: components["schemas"]["Region"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateRegionDto: {
      /**
       * @description ZIP codes covered by this region
       * @example [
       *       "00100",
       *       "00101"
       *     ]
       */
      zipCodes?: string[];
      /**
       * @description Operating hours configuration
       * @example {
       *       "days": [
       *         "mon",
       *         "wed",
       *         "fri"
       *       ],
       *       "startTime": "08:00",
       *       "endTime": "17:00"
       *     }
       */
      operatingHours?: Record<string, never>;
      /**
       * @description Service types available in this region
       * @example [
       *       "residential",
       *       "commercial"
       *     ]
       */
      serviceTypes?: string[];
      /**
       * @description Longitude of region centroid
       * @example 36.8219
       */
      centroidLon?: number;
      /**
       * @description Latitude of region centroid
       * @example -1.2921
       */
      centroidLat?: number;
      /**
       * @description GeoJSON polygon boundary
       * @example {
       *       "type": "Polygon",
       *       "coordinates": [
       *         [
       *           [
       *             36.8219,
       *             -1.2921
       *           ],
       *           [
       *             36.895,
       *             -1.2921
       *           ],
       *           [
       *             36.895,
       *             -1.2335
       *           ],
       *           [
       *             36.8219,
       *             -1.2335
       *           ],
       *           [
       *             36.8219,
       *             -1.2921
       *           ]
       *         ]
       *       ]
       *     }
       */
      boundary?: Record<string, never>;
      name?: string;
      tenant?: components["schemas"]["TenantDto"];
    };
    CreateSettingsDto: {
      config?: string;
      settingsType?: string;
      subjectType?: string;
      tenant: components["schemas"]["TenantDto"];
      user: components["schemas"]["UserDto"];
    };
    InfinityPaginationSettingsResponseDto: {
      data: components["schemas"]["Settings"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateSettingsDto: {
      config?: string;
      settingsType?: string;
      subjectType?: string;
      tenant?: components["schemas"]["TenantDto"];
      user?: components["schemas"]["UserDto"];
    };
    CreateKycDetailsDto: {
      verifiedBy?: number;
      /** Format: date-time */
      verifiedAt?: string;
      /** Format: date-time */
      submittedAt?: string;
      /**
       * @default pending
       * @enum {string}
       */
      status: "pending" | "verified" | "rejected";
      documentData?: Record<string, never>;
      documentNumber?: string;
      documentType?: string;
      /** @enum {string} */
      subjectType: "user" | "tenant";
      tenant: components["schemas"]["TenantDto"];
      user: components["schemas"]["UserDto"];
    };
    InfinityPaginationKycDetailsResponseDto: {
      data: components["schemas"]["KycDetails"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateKycDetailsDto: {
      verifiedBy?: number;
      /** Format: date-time */
      verifiedAt?: string;
      /** Format: date-time */
      submittedAt?: string;
      /**
       * @default pending
       * @enum {string}
       */
      status: "pending" | "verified" | "rejected";
      documentData?: Record<string, never>;
      documentNumber?: string;
      documentType?: string;
      /** @enum {string} */
      subjectType?: "user" | "tenant";
      tenant?: components["schemas"]["TenantDto"];
      user?: components["schemas"]["UserDto"];
    };
    FileResponseDto: {
      file: components["schemas"]["FileType"];
    };
    CreateTenantTypeDto: {
      description?: string;
      /** @enum {string} */
      code?:
        | "platform_owner"
        | "community_group"
        | "recycling_company"
        | "collection_agency"
        | "municipality"
        | "enterprise"
        | "educational_institution"
        | "healthcare_provider"
        | "non_profit_organization"
        | "government_agency"
        | "technology_company"
        | "retail_business"
        | "manufacturing_company"
        | "transportation_service"
        | "financial_institution"
        | "agricultural_business"
        | "energy_provider"
        | "construction_company"
        | "hospitality_business"
        | "generic";
      name?: string;
    };
    InfinityPaginationTenantTypeResponseDto: {
      data: components["schemas"]["TenantType"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateTenantTypeDto: {
      description?: string;
      /** @enum {string} */
      code?:
        | "platform_owner"
        | "community_group"
        | "recycling_company"
        | "collection_agency"
        | "municipality"
        | "enterprise"
        | "educational_institution"
        | "healthcare_provider"
        | "non_profit_organization"
        | "government_agency"
        | "technology_company"
        | "retail_business"
        | "manufacturing_company"
        | "transportation_service"
        | "financial_institution"
        | "agricultural_business"
        | "energy_provider"
        | "construction_company"
        | "hospitality_business"
        | "generic";
      name?: string;
    };
    PaymentAggregatorDto: {
      id: string;
    };
    CreatePaymentNotificationDto: {
      tenant: components["schemas"]["TenantDto"];
      aggregator: components["schemas"]["PaymentAggregatorDto"];
      /** Format: date-time */
      processed_at?: string;
      processed: boolean;
      raw_payload: Record<string, never>;
      /** @enum {string} */
      status: "pending" | "completed" | "failed" | "cancelled" | "reversed";
      /** Format: date-time */
      received_at: string;
      /** @enum {string} */
      payment_method:
        | "mobile_money"
        | "credit_card"
        | "debit_card"
        | "paypal"
        | "bank_transfer"
        | "crypto"
        | "ussd"
        | "agency_banking";
      /** @enum {string} */
      currency:
        | "KES"
        | "USD"
        | "EUR"
        | "GBP"
        | "NGN"
        | "ZAR"
        | "UGX"
        | "TZS"
        | "RWF";
      amount: number;
      external_txn_id: string;
      /** @enum {string} */
      provider:
        | "mpesa"
        | "airtel_money"
        | "equity_bank"
        | "kcb_bank"
        | "cooperative_bank"
        | "absa"
        | "ncba"
        | "safaricom"
        | "paypal"
        | "flutterwave"
        | "paystack"
        | "stripe"
        | "coinbase";
    };
    PaymentNotification: {
      tenant: components["schemas"]["Tenant"];
      aggregator: components["schemas"]["PaymentAggregator"];
      /** Format: date-time */
      processed_at: string | null;
      processed: boolean;
      raw_payload: Record<string, never>;
      /** @enum {string} */
      status: "pending" | "completed" | "failed" | "cancelled" | "reversed";
      /** Format: date-time */
      received_at: string;
      /** @enum {string} */
      payment_method:
        | "mobile_money"
        | "credit_card"
        | "debit_card"
        | "paypal"
        | "bank_transfer"
        | "crypto"
        | "ussd"
        | "agency_banking";
      /** @enum {string} */
      currency:
        | "KES"
        | "USD"
        | "EUR"
        | "GBP"
        | "NGN"
        | "ZAR"
        | "UGX"
        | "TZS"
        | "RWF";
      amount: number;
      external_txn_id: string;
      /** @enum {string} */
      provider:
        | "mpesa"
        | "airtel_money"
        | "equity_bank"
        | "kcb_bank"
        | "cooperative_bank"
        | "absa"
        | "ncba"
        | "safaricom"
        | "paypal"
        | "flutterwave"
        | "paystack"
        | "stripe"
        | "coinbase";
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    PaymentAggregator: {
      logo: string | null;
      isActive: boolean;
      tenant: components["schemas"]["Tenant"];
      /**
       * @description Payment configuration object
       * @example {
       *       "webhookUrl": "https://api.example.com/webhook",
       *       "authToken": "secure_token_123",
       *       "reconciliationWindow": 30
       *     }
       */
      config?: Record<string, never>;
      name: string | null;
      notifications: components["schemas"]["PaymentNotification"][] | null;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    InfinityPaginationPaymentNotificationResponseDto: {
      data: components["schemas"]["PaymentNotification"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdatePaymentNotificationDto: {
      tenant?: components["schemas"]["TenantDto"];
      aggregator?: components["schemas"]["PaymentAggregatorDto"];
      /** Format: date-time */
      processed_at?: string;
      processed?: boolean;
      raw_payload?: Record<string, never>;
      /** @enum {string} */
      status?: "pending" | "completed" | "failed" | "cancelled" | "reversed";
      /** Format: date-time */
      received_at?: string;
      /** @enum {string} */
      payment_method?:
        | "mobile_money"
        | "credit_card"
        | "debit_card"
        | "paypal"
        | "bank_transfer"
        | "crypto"
        | "ussd"
        | "agency_banking";
      /** @enum {string} */
      currency?:
        | "KES"
        | "USD"
        | "EUR"
        | "GBP"
        | "NGN"
        | "ZAR"
        | "UGX"
        | "TZS"
        | "RWF";
      amount?: number;
      external_txn_id?: string;
      /** @enum {string} */
      provider?:
        | "mpesa"
        | "airtel_money"
        | "equity_bank"
        | "kcb_bank"
        | "cooperative_bank"
        | "absa"
        | "ncba"
        | "safaricom"
        | "paypal"
        | "flutterwave"
        | "paystack"
        | "stripe"
        | "coinbase";
    };
    PaymentNotificationDto: {
      id: string;
    };
    CreatePaymentAggregatorDto: {
      logo?: string;
      isActive: boolean;
      tenant: components["schemas"]["TenantDto"];
      /**
       * @description Payment configuration object
       * @example {
       *       "webhookUrl": "https://api.example.com/webhook",
       *       "authToken": "secure_token_123",
       *       "reconciliationWindow": 30
       *     }
       */
      config?: Record<string, never>;
      name?: string;
      notifications?: components["schemas"]["PaymentNotificationDto"][];
    };
    InfinityPaginationPaymentAggregatorResponseDto: {
      data: components["schemas"]["PaymentAggregator"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdatePaymentAggregatorDto: {
      logo?: string;
      isActive?: boolean;
      tenant?: components["schemas"]["TenantDto"];
      /**
       * @description Payment configuration object
       * @example {
       *       "webhookUrl": "https://api.example.com/webhook",
       *       "authToken": "secure_token_123",
       *       "reconciliationWindow": 30
       *     }
       */
      config?: Record<string, never>;
      name?: string;
      notifications?: components["schemas"]["PaymentNotificationDto"][];
    };
    AuditLogEntry: {
      /** @example 2025-05-28T12:34:56.789Z */
      date: string;
      /** @example 100.5 */
      amount: number;
      /**
       * @example ADD
       * @enum {string}
       */
      type: "ADD" | "DEDUCT";
      /** @example REF1234 */
      reference: string;
    };
    CreateCreditBalanceDto: {
      tenant: components["schemas"]["TenantDto"];
      auditLog?: components["schemas"]["AuditLogEntry"][] | null;
      amount: number;
      customer: components["schemas"]["UserDto"];
    };
    CreditBalance: {
      tenant: components["schemas"]["Tenant"];
      auditLog?: components["schemas"]["AuditLogEntry"][] | null;
      amount: number;
      customer: components["schemas"]["User"];
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    InfinityPaginationCreditBalanceResponseDto: {
      data: components["schemas"]["CreditBalance"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateCreditBalanceDto: {
      tenant?: components["schemas"]["TenantDto"];
      auditLog?: components["schemas"]["AuditLogEntry"][] | null;
      amount?: number;
      customer?: components["schemas"]["UserDto"];
    };
    CreatePaymentMethodDto: {
      tenant: components["schemas"]["TenantDto"];
      config?: Record<string, never> | null;
      processorType: string;
      name: string;
    };
    PaymentMethod: {
      tenant: components["schemas"]["Tenant"];
      config?: Record<string, never> | null;
      processorType: string;
      name: string;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    InfinityPaginationPaymentMethodResponseDto: {
      data: components["schemas"]["PaymentMethod"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdatePaymentMethodDto: {
      tenant?: components["schemas"]["TenantDto"];
      config?: Record<string, never> | null;
      processorType?: string;
      name?: string;
    };
    InvoiceDto: {
      id: string;
    };
    CreateReminderDto: {
      message?: string;
      tenant: components["schemas"]["TenantDto"];
      user?: components["schemas"]["UserDto"];
      invoice?: components["schemas"]["InvoiceDto"];
      /** @enum {string} */
      channel: "EMAIL" | "SMS" | "PUSH";
      /** @enum {string} */
      status: "SCHEDULED" | "SENT" | "FAILED";
      /** Format: date-time */
      scheduledAt: string;
      /** Format: date-time */
      sentAt?: string;
    };
    /** @enum {string} */
    ResidenceType:
      | "APARTMENT"
      | "HOUSE"
      | "DUPLEX"
      | "CONDO"
      | "TOWNHOUSE"
      | "OTHER";
    Residence: {
      type: components["schemas"]["ResidenceType"];
      occupants: components["schemas"]["User"][] | null;
      region: components["schemas"]["Region"];
      tenant: components["schemas"]["Tenant"];
      isActive: boolean;
      charge: number;
      name: string;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Exemption: {
      description: string | null;
      tenant: components["schemas"]["Tenant"];
      invoice: components["schemas"]["Invoice"] | null;
      residence: components["schemas"]["Residence"] | null;
      region: components["schemas"]["Region"] | null;
      customer: components["schemas"]["User"] | null;
      /** Format: date-time */
      endDate: string;
      /** Format: date-time */
      startDate: string;
      reason: string | null;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    PaymentPlan: {
      description: string | null;
      name: string;
      tenant: components["schemas"]["Tenant"];
      isActive: boolean;
      unit: string;
      minimumCharge: number;
      rateStructure:
        | (
            | {
                /** @enum {unknown} */
                type?: "FLAT";
                amount?: number;
              }
            | {
                /** @enum {unknown} */
                type?: "PER_UNIT";
                rate?: number;
              }
            | {
                /** @enum {unknown} */
                type?: "CREDIT_RATE";
                rate?: number;
              }
            | {
                /** @enum {unknown} */
                type?: "TIERED";
                tiers?: {
                  from: number;
                  to: number;
                  rate: number;
                }[];
              }
            | {
                /** @enum {unknown} */
                type?: "PREPAID";
                creditRate?: number;
              }
          )
        | null;
      /** @enum {string} */
      type: "FLAT_MONTHLY" | "PER_WEIGHT" | "TIERED" | "PREPAID" | "CREDIT";
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @enum {string} */
    DiscountType: "FIXED" | "PERCENTAGE";
    Discount: {
      description: string | null;
      minVolume: number | null;
      tenant: components["schemas"]["Tenant"];
      region: components["schemas"]["Region"] | null;
      customer: components["schemas"]["User"] | null;
      plan: components["schemas"]["PaymentPlan"] | null;
      isActive: boolean;
      /** Format: date-time */
      validTo: string;
      /** Format: date-time */
      validFrom: string;
      value: number;
      type: components["schemas"]["DiscountType"];
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @enum {string} */
    AccountType: "asset" | "liability" | "equity" | "revenue" | "expense";
    /** @enum {string} */
    NotificationChannel: "EMAIL" | "SMS" | "WEBHOOK";
    /** @enum {string} */
    NotificationType: "ALERT" | "REMINDER" | "REPORT";
    Account: {
      tenant: components["schemas"]["Tenant"];
      owner: components["schemas"]["User"][] | null;
      type: components["schemas"]["AccountType"];
      active: boolean;
      callbackUrl: string | null;
      notificationChannel?: components["schemas"]["NotificationChannel"];
      notificationType?: components["schemas"]["NotificationType"];
      receiveNotification: boolean;
      balance: number;
      number: string | null;
      description: string;
      name: string;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    AccountsReceivable: {
      tenant: components["schemas"]["Tenant"];
      account: components["schemas"]["Account"][] | null;
      owner: components["schemas"]["User"][] | null;
      /**
       * @description The type of account. Can be SAVINGS, CHECKING, or CURRENT.
       * @enum {string|null}
       */
      accountType?:
        | "asset"
        | "liability"
        | "equity"
        | "revenue"
        | "expense"
        | null;
      amount: number;
      /**
       * @description The type of transaction: CREDIT, DEBIT, TRANSFER, or REFUND.
       * @enum {string}
       */
      transactionType:
        | "CREDIT"
        | "DEBIT"
        | "TRANSFER"
        | "REFUND"
        | "WRITE_OFF"
        | "LATE_FEE"
        | "ADJUSTMENT"
        | "CREDIT_MEMO"
        | "INVOICE_PAYMENT"
        | "CHARGEBACK"
        | "PAYMENT"
        | "DISCOUNT"
        | "FEE"
        | "TAX"
        | "INTEREST"
        | "REVERSAL"
        | "PREPAYMENT"
        | "OVERPAYMENT"
        | "UNDERPAYMENT"
        | "ESCALATION_CHARGE"
        | "SERVICE_CHARGE"
        | "PENALTY"
        | "CASH_RECEIPT"
        | "ALLOCATION"
        | "MANUAL_ENTRY";
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Invoice: {
      invoiceNumber: string;
      tenant: components["schemas"]["Tenant"];
      exemption: components["schemas"]["Exemption"] | null;
      discount: components["schemas"]["Discount"] | null;
      accountsReceivable: components["schemas"]["AccountsReceivable"] | null;
      amountDue: number | null;
      amountPaid: number | null;
      plan: components["schemas"]["PaymentPlan"][] | null;
      /**
       * @description Payment breakdown structure
       * @example {
       *       "baseAmount": {
       *         "type": "number",
       *         "example": 100
       *       },
       *       "discounts": {
       *         "type": "number",
       *         "example": 10
       *       },
       *       "tax": {
       *         "type": "number",
       *         "example": 18
       *       },
       *       "adjustments": {
       *         "type": "number",
       *         "example": 5
       *       }
       *     }
       */
      breakdown?: Record<string, never> | null;
      /** @enum {string} */
      status: "PENDING" | "PAID" | "CANCELLED" | "OVERDUE" | "FAILED";
      /** Format: date-time */
      dueDate: string | null;
      amount: number;
      customer: components["schemas"]["User"] | null;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Reminder: {
      message: string | null;
      tenant: components["schemas"]["Tenant"];
      user: components["schemas"]["User"] | null;
      invoice: components["schemas"]["Invoice"] | null;
      /** @enum {string} */
      channel: "EMAIL" | "SMS" | "PUSH";
      /** @enum {string} */
      status: "SCHEDULED" | "SENT" | "FAILED";
      /** Format: date-time */
      scheduledAt: string;
      /** Format: date-time */
      sentAt: string | null;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    InfinityPaginationReminderResponseDto: {
      data: components["schemas"]["Reminder"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateReminderDto: {
      message?: string;
      tenant?: components["schemas"]["TenantDto"];
      user?: components["schemas"]["UserDto"];
      invoice?: components["schemas"]["InvoiceDto"];
      /** @enum {string} */
      channel?: "EMAIL" | "SMS" | "PUSH";
      /** @enum {string} */
      status?: "SCHEDULED" | "SENT" | "FAILED";
      /** Format: date-time */
      scheduledAt?: string;
      /** Format: date-time */
      sentAt?: string;
    };
    ExemptionDto: {
      id: string;
    };
    DiscountDto: {
      id: string;
    };
    AccountsReceivableDto: {
      id: string;
    };
    PaymentPlanDto: {
      id: string;
    };
    CreateInvoiceDto: {
      invoiceNumber: string;
      tenant: components["schemas"]["TenantDto"];
      exemption?: components["schemas"]["ExemptionDto"];
      discount?: components["schemas"]["DiscountDto"];
      accountsReceivable?: components["schemas"]["AccountsReceivableDto"];
      amountDue?: number;
      amountPaid?: number;
      plan?: components["schemas"]["PaymentPlanDto"][];
      /**
       * @description Payment breakdown structure
       * @example {
       *       "baseAmount": {
       *         "type": "number",
       *         "example": 100
       *       },
       *       "discounts": {
       *         "type": "number",
       *         "example": 10
       *       },
       *       "tax": {
       *         "type": "number",
       *         "example": 18
       *       },
       *       "adjustments": {
       *         "type": "number",
       *         "example": 5
       *       }
       *     }
       */
      breakdown?: Record<string, never> | null;
      /** @enum {string} */
      status: "PENDING" | "PAID" | "CANCELLED" | "OVERDUE" | "FAILED";
      /** Format: date-time */
      dueDate?: string;
      amount: number;
      customer?: components["schemas"]["UserDto"];
    };
    InfinityPaginationInvoiceResponseDto: {
      data: components["schemas"]["Invoice"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateInvoiceDto: {
      invoiceNumber?: string;
      tenant?: components["schemas"]["TenantDto"];
      exemption?: components["schemas"]["ExemptionDto"];
      discount?: components["schemas"]["DiscountDto"];
      accountsReceivable?: components["schemas"]["AccountsReceivableDto"];
      amountDue?: number;
      amountPaid?: number;
      plan?: components["schemas"]["PaymentPlanDto"][];
      /**
       * @description Payment breakdown structure
       * @example {
       *       "baseAmount": {
       *         "type": "number",
       *         "example": 100
       *       },
       *       "discounts": {
       *         "type": "number",
       *         "example": 10
       *       },
       *       "tax": {
       *         "type": "number",
       *         "example": 18
       *       },
       *       "adjustments": {
       *         "type": "number",
       *         "example": 5
       *       }
       *     }
       */
      breakdown?: Record<string, never> | null;
      /** @enum {string} */
      status?: "PENDING" | "PAID" | "CANCELLED" | "OVERDUE" | "FAILED";
      /** Format: date-time */
      dueDate?: string;
      amount?: number;
      customer?: components["schemas"]["UserDto"];
    };
    ResidenceDto: {
      id: string;
    };
    CreateExemptionDto: {
      description?: string;
      tenant: components["schemas"]["TenantDto"];
      invoice?: components["schemas"]["InvoiceDto"];
      residence?: components["schemas"]["ResidenceDto"];
      region?: components["schemas"]["RegionDto"];
      customer?: components["schemas"]["UserDto"];
      /** Format: date-time */
      endDate: string;
      /** Format: date-time */
      startDate: string;
      reason?: string;
    };
    InfinityPaginationExemptionResponseDto: {
      data: components["schemas"]["Exemption"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateExemptionDto: {
      description?: string;
      tenant?: components["schemas"]["TenantDto"];
      invoice?: components["schemas"]["InvoiceDto"];
      residence?: components["schemas"]["ResidenceDto"];
      region?: components["schemas"]["RegionDto"];
      customer?: components["schemas"]["UserDto"];
      /** Format: date-time */
      endDate?: string;
      /** Format: date-time */
      startDate?: string;
      reason?: string;
    };
    CreateDiscountDto: {
      description?: string;
      minVolume?: number;
      tenant: components["schemas"]["TenantDto"];
      region?: components["schemas"]["RegionDto"];
      customer?: components["schemas"]["UserDto"];
      plan?: components["schemas"]["PaymentPlanDto"];
      isActive: boolean;
      /** Format: date-time */
      validTo: string;
      /** Format: date-time */
      validFrom: string;
      value: number;
      type: components["schemas"]["DiscountType"];
    };
    InfinityPaginationDiscountResponseDto: {
      data: components["schemas"]["Discount"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateDiscountDto: {
      description?: string;
      minVolume?: number;
      tenant?: components["schemas"]["TenantDto"];
      region?: components["schemas"]["RegionDto"];
      customer?: components["schemas"]["UserDto"];
      plan?: components["schemas"]["PaymentPlanDto"];
      isActive?: boolean;
      /** Format: date-time */
      validTo?: string;
      /** Format: date-time */
      validFrom?: string;
      value?: number;
      type?: components["schemas"]["DiscountType"];
    };
    CreatePaymentPlanDto: {
      description?: string;
      name: string;
      tenant: components["schemas"]["TenantDto"];
      isActive: components["schemas"]["TenantDto"];
      unit: string;
      minimumCharge: number;
      rateStructure:
        | (
            | {
                /** @enum {unknown} */
                type?: "FLAT";
                amount?: number;
              }
            | {
                /** @enum {unknown} */
                type?: "PER_UNIT";
                rate?: number;
              }
            | {
                /** @enum {unknown} */
                type?: "CREDIT_RATE";
                rate?: number;
              }
            | {
                /** @enum {unknown} */
                type?: "TIERED";
                tiers?: {
                  from: number;
                  to: number;
                  rate: number;
                }[];
              }
            | {
                /** @enum {unknown} */
                type?: "PREPAID";
                creditRate?: number;
              }
          )
        | null;
      /** @enum {string} */
      type: "FLAT_MONTHLY" | "PER_WEIGHT" | "TIERED" | "PREPAID" | "CREDIT";
    };
    InfinityPaginationPaymentPlanResponseDto: {
      data: components["schemas"]["PaymentPlan"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdatePaymentPlanDto: {
      description?: string;
      name?: string;
      tenant?: components["schemas"]["TenantDto"];
      isActive?: components["schemas"]["TenantDto"];
      unit?: string;
      minimumCharge?: number;
      rateStructure?:
        | (
            | {
                /** @enum {unknown} */
                type?: "FLAT";
                amount?: number;
              }
            | {
                /** @enum {unknown} */
                type?: "PER_UNIT";
                rate?: number;
              }
            | {
                /** @enum {unknown} */
                type?: "CREDIT_RATE";
                rate?: number;
              }
            | {
                /** @enum {unknown} */
                type?: "TIERED";
                tiers?: {
                  from: number;
                  to: number;
                  rate: number;
                }[];
              }
            | {
                /** @enum {unknown} */
                type?: "PREPAID";
                creditRate?: number;
              }
          )
        | null;
      /** @enum {string} */
      type?: "FLAT_MONTHLY" | "PER_WEIGHT" | "TIERED" | "PREPAID" | "CREDIT";
    };
    AccountDto: {
      id: string;
    };
    CreateAccountsReceivableDto: {
      tenant: components["schemas"]["TenantDto"];
      account?: components["schemas"]["AccountDto"][];
      owner?: components["schemas"]["UserDto"][];
      /**
       * @description The type of account. Can be SAVINGS, CHECKING, or CURRENT.
       * @enum {string|null}
       */
      accountType?:
        | "asset"
        | "liability"
        | "equity"
        | "revenue"
        | "expense"
        | null;
      amount: number;
      /**
       * @description The type of transaction: CREDIT, DEBIT, TRANSFER, or REFUND.
       * @enum {string}
       */
      transactionType:
        | "CREDIT"
        | "DEBIT"
        | "TRANSFER"
        | "REFUND"
        | "WRITE_OFF"
        | "LATE_FEE"
        | "ADJUSTMENT"
        | "CREDIT_MEMO"
        | "INVOICE_PAYMENT"
        | "CHARGEBACK"
        | "PAYMENT"
        | "DISCOUNT"
        | "FEE"
        | "TAX"
        | "INTEREST"
        | "REVERSAL"
        | "PREPAYMENT"
        | "OVERPAYMENT"
        | "UNDERPAYMENT"
        | "ESCALATION_CHARGE"
        | "SERVICE_CHARGE"
        | "PENALTY"
        | "CASH_RECEIPT"
        | "ALLOCATION"
        | "MANUAL_ENTRY";
    };
    InfinityPaginationAccountsReceivableResponseDto: {
      data: components["schemas"]["AccountsReceivable"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateAccountsReceivableDto: {
      tenant?: components["schemas"]["TenantDto"];
      account?: components["schemas"]["AccountDto"][];
      owner?: components["schemas"]["UserDto"][];
      /**
       * @description The type of account. Can be SAVINGS, CHECKING, or CURRENT.
       * @enum {string|null}
       */
      accountType?:
        | "asset"
        | "liability"
        | "equity"
        | "revenue"
        | "expense"
        | null;
      amount?: number;
      /**
       * @description The type of transaction: CREDIT, DEBIT, TRANSFER, or REFUND.
       * @enum {string}
       */
      transactionType?:
        | "CREDIT"
        | "DEBIT"
        | "TRANSFER"
        | "REFUND"
        | "WRITE_OFF"
        | "LATE_FEE"
        | "ADJUSTMENT"
        | "CREDIT_MEMO"
        | "INVOICE_PAYMENT"
        | "CHARGEBACK"
        | "PAYMENT"
        | "DISCOUNT"
        | "FEE"
        | "TAX"
        | "INTEREST"
        | "REVERSAL"
        | "PREPAYMENT"
        | "OVERPAYMENT"
        | "UNDERPAYMENT"
        | "ESCALATION_CHARGE"
        | "SERVICE_CHARGE"
        | "PENALTY"
        | "CASH_RECEIPT"
        | "ALLOCATION"
        | "MANUAL_ENTRY";
    };
    CreateAccountDto: {
      tenant: components["schemas"]["TenantDto"];
      owner?: components["schemas"]["UserDto"][];
      type: components["schemas"]["AccountType"];
      active: boolean;
      callbackUrl?: string;
      notificationChannel?: components["schemas"]["NotificationChannel"];
      notificationType?: components["schemas"]["NotificationType"];
      receiveNotification: boolean;
      balance: number;
      number?: string;
      description: string;
      name: string;
    };
    InfinityPaginationAccountResponseDto: {
      data: components["schemas"]["Account"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateAccountDto: {
      tenant?: components["schemas"]["TenantDto"];
      owner?: components["schemas"]["UserDto"][];
      type?: components["schemas"]["AccountType"];
      active?: boolean;
      callbackUrl?: string;
      notificationChannel?: components["schemas"]["NotificationChannel"];
      notificationType?: components["schemas"]["NotificationType"];
      receiveNotification?: boolean;
      balance?: number;
      number?: string;
      description?: string;
      name?: string;
    };
    CreateResidenceDto: {
      type: components["schemas"]["ResidenceType"];
      occupants?: components["schemas"]["UserDto"][];
      region: components["schemas"]["RegionDto"];
      tenant: components["schemas"]["TenantDto"];
      isActive: boolean;
      charge: number;
      name: string;
    };
    InfinityPaginationResidenceResponseDto: {
      data: components["schemas"]["Residence"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateResidenceDto: {
      type?: components["schemas"]["ResidenceType"];
      occupants?: components["schemas"]["UserDto"][];
      region?: components["schemas"]["RegionDto"];
      tenant?: components["schemas"]["TenantDto"];
      isActive?: boolean;
      charge?: number;
      name?: string;
    };
    CreateInventoryDto: {
      tenant: components["schemas"]["TenantDto"];
      unitOfMeasure?: string;
      materialType?: string;
      accountType: string;
      salePrice?: number;
      purchasePrice: number;
      quantity: number;
      itemDescription?: string;
      itemName?: string;
    };
    Inventory: {
      tenant: components["schemas"]["Tenant"];
      unitOfMeasure: string | null;
      materialType: string | null;
      accountType: string;
      salePrice: number | null;
      purchasePrice: number;
      quantity: number;
      itemDescription: string | null;
      itemName: string | null;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    InfinityPaginationInventoryResponseDto: {
      data: components["schemas"]["Inventory"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateInventoryDto: {
      tenant?: components["schemas"]["TenantDto"];
      unitOfMeasure?: string;
      materialType?: string;
      accountType?: string;
      salePrice?: number;
      purchasePrice?: number;
      quantity?: number;
      itemDescription?: string;
      itemName?: string;
    };
    PaymentMethodDto: {
      id: string;
    };
    TransactionDto: {
      id: string;
    };
    CreatePaymentDto: {
      tenant: components["schemas"]["TenantDto"];
      invoice?: components["schemas"]["InvoiceDto"];
      notification?: components["schemas"]["PaymentNotificationDto"];
      paymentMethod?: components["schemas"]["PaymentMethodDto"];
      customer?: components["schemas"]["UserDto"];
      transactionId?: components["schemas"]["TransactionDto"][];
      /** @enum {string} */
      status: "pending" | "completed" | "failed" | "cancelled" | "reversed";
      method: string;
      /** Format: date-time */
      paymentDate: string;
      amount: number;
    };
    Payment: {
      tenant: components["schemas"]["Tenant"];
      invoice: components["schemas"]["Invoice"] | null;
      notification: components["schemas"]["PaymentNotification"] | null;
      paymentMethod: components["schemas"]["PaymentMethod"] | null;
      customer: components["schemas"]["User"] | null;
      transactionId: components["schemas"]["Transaction"][] | null;
      /** @enum {string} */
      status: "pending" | "completed" | "failed" | "cancelled" | "reversed";
      /** Format: date-time */
      paymentDate: string;
      amount: number;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Transaction: {
      tenant: components["schemas"]["Tenant"];
      payment: components["schemas"]["Payment"];
      creditAccountName: string | null;
      debitAccountName: string | null;
      creditAmount: number;
      debitAmount: number;
      owner: string | null;
      creditAccount: components["schemas"]["Account"][];
      debitAccount: components["schemas"]["Account"][];
      amount: number;
      description: string;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    InfinityPaginationPaymentResponseDto: {
      data: components["schemas"]["Payment"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdatePaymentDto: {
      tenant?: components["schemas"]["TenantDto"];
      invoice?: components["schemas"]["InvoiceDto"];
      notification?: components["schemas"]["PaymentNotificationDto"];
      paymentMethod?: components["schemas"]["PaymentMethodDto"];
      customer?: components["schemas"]["UserDto"];
      transactionId?: components["schemas"]["TransactionDto"][];
      /** @enum {string} */
      status?: "pending" | "completed" | "failed" | "cancelled" | "reversed";
      method?: string;
      /** Format: date-time */
      paymentDate?: string;
      amount?: number;
    };
    PaymentDto: {
      id: string;
    };
    CreateTransactionDto: {
      tenant: components["schemas"]["TenantDto"];
      payment: components["schemas"]["PaymentDto"];
      creditAccountName?: string;
      debitAccountName?: string;
      creditAmount: number;
      debitAmount: number;
      owner?: string;
      creditAccount: components["schemas"]["AccountDto"][];
      debitAccount: components["schemas"]["AccountDto"][];
      amount: number;
      description?: string;
    };
    InfinityPaginationTransactionResponseDto: {
      data: components["schemas"]["Transaction"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateTransactionDto: {
      tenant?: components["schemas"]["TenantDto"];
      payment?: components["schemas"]["PaymentDto"];
      creditAccountName?: string;
      debitAccountName?: string;
      creditAmount?: number;
      debitAmount?: number;
      owner?: string;
      creditAccount?: components["schemas"]["AccountDto"][];
      debitAccount?: components["schemas"]["AccountDto"][];
      amount?: number;
      description?: string;
    };
    AccountsPayableDto: {
      id: string;
    };
    VendorDto: {
      id: string;
    };
    CreateVendorBillDto: {
      tenant: components["schemas"]["TenantDto"];
      accountsPayable?: components["schemas"]["AccountsPayableDto"];
      vendor: components["schemas"]["VendorDto"];
    };
    AccountsPayable: {
      tenant: components["schemas"]["Tenant"];
      account: components["schemas"]["Account"][] | null;
      owner: components["schemas"]["User"][] | null;
      /**
       * @description The type of account. Can be SAVINGS, CHECKING, or CURRENT.
       * @enum {string|null}
       */
      accountType?:
        | "asset"
        | "liability"
        | "equity"
        | "revenue"
        | "expense"
        | null;
      salePrice: number | null;
      purchasePrice: number | null;
      quantity: number;
      itemDescription: string | null;
      itemName: string;
      amount: number;
      /**
       * @description The type of transaction: CREDIT, DEBIT, TRANSFER, or REFUND.
       * @enum {string}
       */
      transactionType:
        | "CREDIT"
        | "DEBIT"
        | "TRANSFER"
        | "REFUND"
        | "WRITE_OFF"
        | "LATE_FEE"
        | "ADJUSTMENT"
        | "CREDIT_MEMO"
        | "INVOICE_PAYMENT"
        | "CHARGEBACK"
        | "PAYMENT"
        | "DISCOUNT"
        | "FEE"
        | "TAX"
        | "INTEREST"
        | "REVERSAL"
        | "PREPAYMENT"
        | "OVERPAYMENT"
        | "UNDERPAYMENT"
        | "ESCALATION_CHARGE"
        | "SERVICE_CHARGE"
        | "PENALTY"
        | "CASH_RECEIPT"
        | "ALLOCATION"
        | "MANUAL_ENTRY";
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    VendorBill: {
      tenant: components["schemas"]["Tenant"];
      accountsPayable: components["schemas"]["AccountsPayable"] | null;
      vendor: components["schemas"]["Vendor"];
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Vendor: {
      tenant: components["schemas"]["Tenant"];
      bills: components["schemas"]["VendorBill"][] | null;
      paymentTerms: string | null;
      contactEmail: string | null;
      name: string;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    InfinityPaginationVendorBillResponseDto: {
      data: components["schemas"]["VendorBill"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateVendorBillDto: {
      tenant?: components["schemas"]["TenantDto"];
      accountsPayable?: components["schemas"]["AccountsPayableDto"];
      vendor?: components["schemas"]["VendorDto"];
    };
    CreateAccountsPayableDto: {
      tenant: components["schemas"]["TenantDto"];
      account?: components["schemas"]["AccountDto"][];
      owner?: components["schemas"]["UserDto"][];
      /**
       * @description The type of account. Can be SAVINGS, CHECKING, or CURRENT.
       * @enum {string|null}
       */
      accountType?:
        | "asset"
        | "liability"
        | "equity"
        | "revenue"
        | "expense"
        | null;
      salePrice?: number;
      purchasePrice?: number;
      quantity: number;
      itemDescription?: string;
      itemName: string;
      amount: number;
      /**
       * @description The type of transaction: CREDIT, DEBIT, TRANSFER, or REFUND.
       * @enum {string}
       */
      transactionType:
        | "CREDIT"
        | "DEBIT"
        | "TRANSFER"
        | "REFUND"
        | "WRITE_OFF"
        | "LATE_FEE"
        | "ADJUSTMENT"
        | "CREDIT_MEMO"
        | "INVOICE_PAYMENT"
        | "CHARGEBACK"
        | "PAYMENT"
        | "DISCOUNT"
        | "FEE"
        | "TAX"
        | "INTEREST"
        | "REVERSAL"
        | "PREPAYMENT"
        | "OVERPAYMENT"
        | "UNDERPAYMENT"
        | "ESCALATION_CHARGE"
        | "SERVICE_CHARGE"
        | "PENALTY"
        | "CASH_RECEIPT"
        | "ALLOCATION"
        | "MANUAL_ENTRY";
    };
    InfinityPaginationAccountsPayableResponseDto: {
      data: components["schemas"]["AccountsPayable"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateAccountsPayableDto: {
      tenant?: components["schemas"]["TenantDto"];
      account?: components["schemas"]["AccountDto"][];
      owner?: components["schemas"]["UserDto"][];
      /**
       * @description The type of account. Can be SAVINGS, CHECKING, or CURRENT.
       * @enum {string|null}
       */
      accountType?:
        | "asset"
        | "liability"
        | "equity"
        | "revenue"
        | "expense"
        | null;
      salePrice?: number;
      purchasePrice?: number;
      quantity?: number;
      itemDescription?: string;
      itemName?: string;
      amount?: number;
      /**
       * @description The type of transaction: CREDIT, DEBIT, TRANSFER, or REFUND.
       * @enum {string}
       */
      transactionType?:
        | "CREDIT"
        | "DEBIT"
        | "TRANSFER"
        | "REFUND"
        | "WRITE_OFF"
        | "LATE_FEE"
        | "ADJUSTMENT"
        | "CREDIT_MEMO"
        | "INVOICE_PAYMENT"
        | "CHARGEBACK"
        | "PAYMENT"
        | "DISCOUNT"
        | "FEE"
        | "TAX"
        | "INTEREST"
        | "REVERSAL"
        | "PREPAYMENT"
        | "OVERPAYMENT"
        | "UNDERPAYMENT"
        | "ESCALATION_CHARGE"
        | "SERVICE_CHARGE"
        | "PENALTY"
        | "CASH_RECEIPT"
        | "ALLOCATION"
        | "MANUAL_ENTRY";
    };
    VendorBillDto: {
      id: string;
    };
    CreateVendorDto: {
      tenant: components["schemas"]["TenantDto"];
      bills?: components["schemas"]["VendorBillDto"][];
      paymentTerms?: string;
      contactEmail?: string;
      name: string;
    };
    InfinityPaginationVendorResponseDto: {
      data: components["schemas"]["Vendor"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateVendorDto: {
      tenant?: components["schemas"]["TenantDto"];
      bills?: components["schemas"]["VendorBillDto"][];
      paymentTerms?: string;
      contactEmail?: string;
      name?: string;
    };
    CustomScheduleDto: {
      /** Format: date-time */
      lastPaymentDate: string;
      paymentCount: number;
    };
    /** @enum {string} */
    PlanStatusEnum:
      | "trial"
      | "active"
      | "suspended"
      | "inactive"
      | "cancelled"
      | "pending"
      | "expired"
      | "completed"
      | "archived"
      | "deleted"
      | "unknown";
    CreateCustomerPlanDto: {
      tenant: components["schemas"]["TenantDto"];
      customSchedule?: components["schemas"]["CustomScheduleDto"] | null;
      /** Format: date-time */
      nextPaymentDate?: string;
      assignedBy?: components["schemas"]["UserDto"];
      status: components["schemas"]["PlanStatusEnum"];
      /**
       * @description Custom rates map (key-value pairs)
       * @example {
       *       "rateA": 100,
       *       "rateB": 150
       *     }
       */
      customRates: {
        [key: string]: number;
      } | null;
      /** Format: date-time */
      endDate?: string;
      /** Format: date-time */
      startDate: string;
      plan: components["schemas"]["PaymentPlanDto"][];
      customer: components["schemas"]["UserDto"][];
    };
    CustomerPlan: {
      tenant: components["schemas"]["Tenant"];
      customSchedule?: components["schemas"]["CustomScheduleDto"] | null;
      /** Format: date-time */
      nextPaymentDate: string | null;
      assignedBy: components["schemas"]["User"] | null;
      status: components["schemas"]["PlanStatusEnum"];
      /**
       * @description Custom rates map (key-value pairs)
       * @example {
       *       "rateA": 100,
       *       "rateB": 150
       *     }
       */
      customRates: {
        [key: string]: number;
      } | null;
      /** Format: date-time */
      endDate: string | null;
      /** Format: date-time */
      startDate: string;
      plan: components["schemas"]["PaymentPlan"][];
      customer: components["schemas"]["User"][];
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    InfinityPaginationCustomerPlanResponseDto: {
      data: components["schemas"]["CustomerPlan"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateCustomerPlanDto: {
      tenant?: components["schemas"]["TenantDto"];
      customSchedule?: components["schemas"]["CustomScheduleDto"] | null;
      /** Format: date-time */
      nextPaymentDate?: string;
      assignedBy?: components["schemas"]["UserDto"];
      status?: components["schemas"]["PlanStatusEnum"];
      /**
       * @description Custom rates map (key-value pairs)
       * @example {
       *       "rateA": 100,
       *       "rateB": 150
       *     }
       */
      customRates?: {
        [key: string]: number;
      } | null;
      /** Format: date-time */
      endDate?: string;
      /** Format: date-time */
      startDate?: string;
      plan?: components["schemas"]["PaymentPlanDto"][];
      customer?: components["schemas"]["UserDto"][];
    };
    CreateTenantConfigDto: {
      value: string;
      key: string;
      tenantId: string;
    };
    TenantConfig: {
      value: string;
      key: string;
      tenantId: string;
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    InfinityPaginationTenantConfigResponseDto: {
      data: components["schemas"]["TenantConfig"][];
      /** @example true */
      hasNextPage: boolean;
    };
    UpdateTenantConfigDto: {
      value?: string;
      key?: string;
      tenantId?: string;
    };
    AuthEmailLoginDto: {
      /** @example test1@example.com */
      email: string;
      password: string;
    };
    LoginResponseDto: {
      token: string;
      refreshToken: string;
      tokenExpires: number;
      user: components["schemas"]["User"];
    };
    AuthRegisterLoginDto: {
      /** @example test1@example.com */
      email: string;
      password: string;
      /** @example John */
      firstName: string;
      /** @example Doe */
      lastName: string;
    };
    AuthConfirmEmailDto: {
      hash: string;
    };
    AuthForgotPasswordDto: {
      /** @example test1@example.com */
      email: string;
    };
    AuthResetPasswordDto: {
      password: string;
      hash: string;
    };
    RefreshResponseDto: {
      token: string;
      refreshToken: string;
      tokenExpires: number;
    };
    AuthUpdateDto: {
      photo?: components["schemas"]["FileDto"];
      /** @example John */
      firstName?: string;
      /** @example Doe */
      lastName?: string;
      /** @example new.email@example.com */
      email?: string;
      password?: string;
      oldPassword?: string;
    };
    AuthFacebookLoginDto: {
      /** @example abc */
      accessToken: string;
    };
    AuthGoogleLoginDto: {
      /** @example abc */
      idToken: string;
    };
    AuthAppleLoginDto: {
      /** @example abc */
      idToken: string;
      firstName?: string;
      lastName?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AuditLogsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationAuditLogResponseDto"];
        };
      };
    };
  };
  AuditLogsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAuditLogDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AuditLog"];
        };
      };
    };
  };
  AuditLogsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AuditLog"];
        };
      };
    };
  };
  AuditLogsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuditLogsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAuditLogDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AuditLog"];
        };
      };
    };
  };
  UsersController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
        filters?: string;
        sort?: string;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationUserResponseDto"];
        };
      };
    };
  };
  UsersController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  UsersController_findOne_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  UsersController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  OnboardingsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationOnboardingResponseDto"];
        };
      };
    };
  };
  OnboardingsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOnboardingDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Onboarding"];
        };
      };
    };
  };
  OnboardingsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Onboarding"];
        };
      };
    };
  };
  OnboardingsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OnboardingsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOnboardingDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Onboarding"];
        };
      };
    };
  };
  OnboardingsController_getUserStatus_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OnboardingsController_initializeUser_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OnboardingsController_completeUserStep_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        userId: string;
        stepKey: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OnboardingsController_getTenantStatus_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        tenantId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OnboardingsController_initializeTenant_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        tenantId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OnboardingsController_skipTenantStep_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        tenantId: string;
        stepKey: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TenantsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationTenantResponseDto"];
        };
      };
    };
  };
  TenantsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTenantDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Tenant"];
        };
      };
    };
  };
  TenantsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Tenant"];
        };
      };
    };
  };
  TenantsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TenantsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTenantDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Tenant"];
        };
      };
    };
  };
  RegionsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationRegionResponseDto"];
        };
      };
    };
  };
  RegionsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRegionDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Region"];
        };
      };
    };
  };
  RegionsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Region"];
        };
      };
    };
  };
  RegionsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RegionsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRegionDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Region"];
        };
      };
    };
  };
  SettingsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationSettingsResponseDto"];
        };
      };
    };
  };
  SettingsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSettingsDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Settings"];
        };
      };
    };
  };
  SettingsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Settings"];
        };
      };
    };
  };
  SettingsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SettingsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSettingsDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Settings"];
        };
      };
    };
  };
  KycDetailsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationKycDetailsResponseDto"];
        };
      };
    };
  };
  KycDetailsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKycDetailsDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["KycDetails"];
        };
      };
    };
  };
  KycDetailsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["KycDetails"];
        };
      };
    };
  };
  KycDetailsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  KycDetailsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateKycDetailsDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["KycDetails"];
        };
      };
    };
  };
  FilesLocalController_uploadFile_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FileResponseDto"];
        };
      };
    };
  };
  TenantTypesController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationTenantTypeResponseDto"];
        };
      };
    };
  };
  TenantTypesController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTenantTypeDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TenantType"];
        };
      };
    };
  };
  TenantTypesController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TenantType"];
        };
      };
    };
  };
  TenantTypesController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TenantTypesController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTenantTypeDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TenantType"];
        };
      };
    };
  };
  PaymentNotificationsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationPaymentNotificationResponseDto"];
        };
      };
    };
  };
  PaymentNotificationsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePaymentNotificationDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentNotification"];
        };
      };
    };
  };
  PaymentNotificationsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentNotification"];
        };
      };
    };
  };
  PaymentNotificationsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PaymentNotificationsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePaymentNotificationDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentNotification"];
        };
      };
    };
  };
  PaymentAggregatorsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationPaymentAggregatorResponseDto"];
        };
      };
    };
  };
  PaymentAggregatorsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePaymentAggregatorDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentAggregator"];
        };
      };
    };
  };
  PaymentAggregatorsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentAggregator"];
        };
      };
    };
  };
  PaymentAggregatorsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PaymentAggregatorsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePaymentAggregatorDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentAggregator"];
        };
      };
    };
  };
  CreditBalancesController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationCreditBalanceResponseDto"];
        };
      };
    };
  };
  CreditBalancesController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCreditBalanceDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreditBalance"];
        };
      };
    };
  };
  CreditBalancesController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreditBalance"];
        };
      };
    };
  };
  CreditBalancesController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CreditBalancesController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCreditBalanceDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreditBalance"];
        };
      };
    };
  };
  PaymentMethodsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationPaymentMethodResponseDto"];
        };
      };
    };
  };
  PaymentMethodsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePaymentMethodDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentMethod"];
        };
      };
    };
  };
  PaymentMethodsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentMethod"];
        };
      };
    };
  };
  PaymentMethodsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PaymentMethodsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePaymentMethodDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentMethod"];
        };
      };
    };
  };
  RemindersController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationReminderResponseDto"];
        };
      };
    };
  };
  RemindersController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateReminderDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Reminder"];
        };
      };
    };
  };
  RemindersController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Reminder"];
        };
      };
    };
  };
  RemindersController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RemindersController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateReminderDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Reminder"];
        };
      };
    };
  };
  InvoicesController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationInvoiceResponseDto"];
        };
      };
    };
  };
  InvoicesController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateInvoiceDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
    };
  };
  InvoicesController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
    };
  };
  InvoicesController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  InvoicesController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateInvoiceDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
    };
  };
  ExemptionsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationExemptionResponseDto"];
        };
      };
    };
  };
  ExemptionsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateExemptionDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Exemption"];
        };
      };
    };
  };
  ExemptionsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Exemption"];
        };
      };
    };
  };
  ExemptionsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ExemptionsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateExemptionDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Exemption"];
        };
      };
    };
  };
  DiscountsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationDiscountResponseDto"];
        };
      };
    };
  };
  DiscountsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDiscountDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Discount"];
        };
      };
    };
  };
  DiscountsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Discount"];
        };
      };
    };
  };
  DiscountsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  DiscountsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateDiscountDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Discount"];
        };
      };
    };
  };
  PaymentPlansController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationPaymentPlanResponseDto"];
        };
      };
    };
  };
  PaymentPlansController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePaymentPlanDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentPlan"];
        };
      };
    };
  };
  PaymentPlansController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentPlan"];
        };
      };
    };
  };
  PaymentPlansController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PaymentPlansController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePaymentPlanDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentPlan"];
        };
      };
    };
  };
  AccountsReceivablesController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationAccountsReceivableResponseDto"];
        };
      };
    };
  };
  AccountsReceivablesController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAccountsReceivableDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AccountsReceivable"];
        };
      };
    };
  };
  AccountsReceivablesController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AccountsReceivable"];
        };
      };
    };
  };
  AccountsReceivablesController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AccountsReceivablesController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAccountsReceivableDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AccountsReceivable"];
        };
      };
    };
  };
  AccountsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationAccountResponseDto"];
        };
      };
    };
  };
  AccountsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAccountDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
    };
  };
  AccountsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
    };
  };
  AccountsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AccountsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAccountDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
    };
  };
  ResidencesController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationResidenceResponseDto"];
        };
      };
    };
  };
  ResidencesController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateResidenceDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Residence"];
        };
      };
    };
  };
  ResidencesController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Residence"];
        };
      };
    };
  };
  ResidencesController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ResidencesController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResidenceDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Residence"];
        };
      };
    };
  };
  InventoriesController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationInventoryResponseDto"];
        };
      };
    };
  };
  InventoriesController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateInventoryDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Inventory"];
        };
      };
    };
  };
  InventoriesController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Inventory"];
        };
      };
    };
  };
  InventoriesController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  InventoriesController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateInventoryDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Inventory"];
        };
      };
    };
  };
  PaymentsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationPaymentResponseDto"];
        };
      };
    };
  };
  PaymentsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePaymentDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
    };
  };
  PaymentsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
    };
  };
  PaymentsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PaymentsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePaymentDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
    };
  };
  TransactionsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationTransactionResponseDto"];
        };
      };
    };
  };
  TransactionsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTransactionDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
    };
  };
  TransactionsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
    };
  };
  TransactionsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TransactionsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTransactionDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
    };
  };
  VendorBillsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationVendorBillResponseDto"];
        };
      };
    };
  };
  VendorBillsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateVendorBillDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VendorBill"];
        };
      };
    };
  };
  VendorBillsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VendorBill"];
        };
      };
    };
  };
  VendorBillsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  VendorBillsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateVendorBillDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VendorBill"];
        };
      };
    };
  };
  AccountsPayablesController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationAccountsPayableResponseDto"];
        };
      };
    };
  };
  AccountsPayablesController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAccountsPayableDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AccountsPayable"];
        };
      };
    };
  };
  AccountsPayablesController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AccountsPayable"];
        };
      };
    };
  };
  AccountsPayablesController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AccountsPayablesController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAccountsPayableDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AccountsPayable"];
        };
      };
    };
  };
  VendorsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationVendorResponseDto"];
        };
      };
    };
  };
  VendorsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateVendorDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
    };
  };
  VendorsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
    };
  };
  VendorsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  VendorsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateVendorDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
    };
  };
  CustomerPlansController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationCustomerPlanResponseDto"];
        };
      };
    };
  };
  CustomerPlansController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCustomerPlanDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CustomerPlan"];
        };
      };
    };
  };
  CustomerPlansController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CustomerPlan"];
        };
      };
    };
  };
  CustomerPlansController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CustomerPlansController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCustomerPlanDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CustomerPlan"];
        };
      };
    };
  };
  TenantConfigsController_findAll_v1: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfinityPaginationTenantConfigResponseDto"];
        };
      };
    };
  };
  TenantConfigsController_create_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTenantConfigDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TenantConfig"];
        };
      };
    };
  };
  TenantConfigsController_findById_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TenantConfig"];
        };
      };
    };
  };
  TenantConfigsController_remove_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TenantConfigsController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTenantConfigDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TenantConfig"];
        };
      };
    };
  };
  AuthController_login_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthEmailLoginDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
    };
  };
  AuthController_register_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthRegisterLoginDto"];
      };
    };
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_confirmEmail_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthConfirmEmailDto"];
      };
    };
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_confirmNewEmail_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthConfirmEmailDto"];
      };
    };
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_forgotPassword_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthForgotPasswordDto"];
      };
    };
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_resetPassword_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthResetPasswordDto"];
      };
    };
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_me_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  AuthController_delete_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_update_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthUpdateDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  AuthController_refresh_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RefreshResponseDto"];
        };
      };
    };
  };
  AuthController_logout_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthFacebookController_login_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthFacebookLoginDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
    };
  };
  AuthGoogleController_login_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthGoogleLoginDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
    };
  };
  AuthAppleController_login_v1: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthAppleLoginDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
    };
  };
  HomeController_appInfo: {
    parameters: {
      query?: never;
      header?: {
        /** @description Tenant ID for database context */
        "x-tenant-id"?: string;
        "x-custom-lang"?: unknown;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
